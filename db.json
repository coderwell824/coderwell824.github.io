{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/quiet/source/css/index.less","path":"css/index.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/favicon.ico","path":"image/favicon.ico","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/logo.png","path":"image/logo.png","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/pattern.png","path":"image/pattern.png","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/fancybox-images.js","path":"js/fancybox-images.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/gitalk.min.js","path":"js/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/fancybox.umd.js","path":"js/fancybox.umd.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/gotop.js","path":"js/gotop.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/hljs.min.js","path":"js/hljs.min.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/highlight/atom-one-dark.less","path":"css/highlight/atom-one-dark.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/about.less","path":"css/pages/about.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/archive.less","path":"css/pages/archive.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/categories.less","path":"css/pages/categories.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/home.less","path":"css/pages/home.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/links.less","path":"css/pages/links.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/post.less","path":"css/pages/post.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/tag.less","path":"css/pages/tag.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/pages/tags.less","path":"css/pages/tags.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/plugin/fancybox.css","path":"css/plugin/fancybox.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/plugin/gitalk.css","path":"css/plugin/gitalk.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/public/article_cente.less","path":"css/public/article_cente.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/public/color.less","path":"css/public/color.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/public/content.less","path":"css/public/content.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/public/header_background.less","path":"css/public/header_background.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/public/mixins.less","path":"css/public/mixins.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/widget/food.less","path":"css/widget/food.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/widget/grouping.less","path":"css/widget/grouping.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/widget/header.less","path":"css/widget/header.less","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/widget/header_body.less","path":"css/widget/header_body.less","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"dc68227eb84521e4b27b77bba36b44b75c17ef87","modified":1659235373693},{"_id":"source/about/index.md","hash":"113b99995a2e6059f386d5133d154e99a84031fc","modified":1659230510938},{"_id":"source/categories/index.md","hash":"95dfc14c5423a6b914e0b420b35660198d984d7d","modified":1659230510939},{"_id":"source/links/index.md","hash":"a294ef605267efbad9a130a203fdc0b8b3815a6a","modified":1659230510939},{"_id":"source/tags/index.md","hash":"5151016ddb5ecb41e4e00ded9cd837256bf885d3","modified":1659230510939},{"_id":"themes/quiet/.gitignore","hash":"b0e13971511bbc4a0203f783a25687f545ca4fa5","modified":1659230510939},{"_id":"themes/quiet/LICENSE","hash":"b141d557809fd4804d6d828dfcaa5c4adb734bc7","modified":1659230510940},{"_id":"themes/quiet/README-EN.md","hash":"39d926029f37133ee20d81c026d9279533954fff","modified":1659230510940},{"_id":"themes/quiet/README.md","hash":"5ce46f628ffbfc458746db4f5a5c02625be3b8e1","modified":1659230510940},{"_id":"themes/quiet/_config.yml","hash":"00756b49f31ea3077529ace437c6fac050d5afd7","modified":1675653093194},{"_id":"themes/quiet/package.json","hash":"b1ab898b6dc5b7ae5d40b13db729d50ff9a93bb2","modified":1659234088410},{"_id":"themes/quiet/layout/404.ejs","hash":"ee787012f3d6c350473e1e6fd33f4c13a9f8fc5a","modified":1659230510940},{"_id":"themes/quiet/layout/about.ejs","hash":"3089eb0e0c753ec1b0d8d064224b02b78d8f993f","modified":1659230510943},{"_id":"themes/quiet/layout/archive.ejs","hash":"e3451030d7bcc5468ead22d01164ed7072664d87","modified":1659230510943},{"_id":"themes/quiet/layout/categories.ejs","hash":"c6d5a0a9b79cc56087327f9d3286b9d7514e1af9","modified":1659230510943},{"_id":"themes/quiet/layout/index.ejs","hash":"2d1245d2b8d231e1306c4704a450977299e7318d","modified":1659230510943},{"_id":"themes/quiet/layout/layout.ejs","hash":"8195cc46c79d02fff13b42a8b7541b2ef0f8abf7","modified":1675652871275},{"_id":"themes/quiet/layout/links.ejs","hash":"a2782c2816c33dc2e0365866374ccf1c5f8ae57f","modified":1659230510943},{"_id":"themes/quiet/layout/post.ejs","hash":"d934b6a6e1f8b42ec5b5e80c1beee62e42bce81a","modified":1659230510944},{"_id":"themes/quiet/layout/tag.ejs","hash":"9df2d4ab6334cb386a58eac7f65fb3e251a86250","modified":1659230510944},{"_id":"themes/quiet/layout/tags.ejs","hash":"a0c7e74f4de2a8201d8ef0fa1cb2d8c317846bb0","modified":1659230510944},{"_id":"themes/quiet/layout/_partial/foot.ejs","hash":"d06c0e0ad5bd68b9a5c7bedb84a6dc8d5b03db65","modified":1659230510941},{"_id":"themes/quiet/layout/_partial/head.ejs","hash":"ba9bd3282bc195efde3093008f0f915c2b12d5e0","modified":1659230510941},{"_id":"themes/quiet/layout/_partial/header.ejs","hash":"2d0eb265df6def742cbcab6aca72ee98733bd8a0","modified":1659230510941},{"_id":"themes/quiet/layout/_partial/home.ejs","hash":"ce98d15abd111c9d6b76d47ec4d9f2f2ae28c6d8","modified":1659230510941},{"_id":"themes/quiet/layout/_partial/post_centent.ejs","hash":"c3cd12198ba8d86b2427c79b42f89ed73a127c6b","modified":1659230510941},{"_id":"themes/quiet/layout/_partial/post_head.ejs","hash":"324217741ac1a67cb7c853f4034eedc5b856a6c9","modified":1659230510941},{"_id":"themes/quiet/layout/_partial/post_paging.ejs","hash":"673965e84b2d23d4cca6bd822752b272260205e7","modified":1659230510942},{"_id":"themes/quiet/layout/_widget/analytics.ejs","hash":"e6f5fea8a5e1642a569cfeaba24f74e68efd9e09","modified":1659230510942},{"_id":"themes/quiet/layout/_widget/comment.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675570243388},{"_id":"themes/quiet/layout/_widget/gotop.ejs","hash":"a894ee61bc45c29594ce59f72809fea5f2c55ae0","modified":1659230510942},{"_id":"themes/quiet/layout/_widget/grouping.ejs","hash":"370b5483e6092289ecba933f3a622936e39133d5","modified":1659230510942},{"_id":"themes/quiet/layout/_widget/header_body.ejs","hash":"e1498276e2c3962d8dc9f114ec51e97a8f2874d7","modified":1659230510942},{"_id":"themes/quiet/layout/_widget/sidebar.ejs","hash":"1382c2c52645973b9558ea28de77bdd146276053","modified":1675652807041},{"_id":"themes/quiet/source/css/index.less","hash":"5d9c79ae6a842fa2f74f74e7d6931cc509b75346","modified":1659230510945},{"_id":"themes/quiet/source/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1659230510948},{"_id":"themes/quiet/source/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1659230510948},{"_id":"themes/quiet/source/js/fancybox-images.js","hash":"1eee6b143f944bce1dab2a9f2141435e545bc537","modified":1659230510949},{"_id":"themes/quiet/source/js/gotop.js","hash":"78f04d8833cf9916f71469fb80722004dce09b28","modified":1659230510953},{"_id":"themes/quiet/source/js/index.js","hash":"2023e077272d3bfbc8c02791b402b6cf5ce6b118","modified":1659230510954},{"_id":"themes/quiet/source/css/highlight/atom-one-dark.less","hash":"da8603ef348b38d6ef090fa9172a6521e53b6c89","modified":1659230510944},{"_id":"themes/quiet/source/css/pages/about.less","hash":"9b026d5307839bda6d81710a191033e5222994c4","modified":1659230510945},{"_id":"themes/quiet/source/css/pages/archive.less","hash":"7394878db4bc9746c1433c98e0b3769e612971d8","modified":1659230510945},{"_id":"themes/quiet/source/css/pages/categories.less","hash":"cb5aa9b353a44fda0d7e500763b88d906feae238","modified":1659230510945},{"_id":"themes/quiet/source/css/pages/home.less","hash":"16f7dd1eb047fac29f7a06532e48d2164bee2294","modified":1659230510945},{"_id":"themes/quiet/source/css/pages/links.less","hash":"abcc3aca4d6503db9276e33b005aa27ff02f29e5","modified":1659230510945},{"_id":"themes/quiet/source/css/pages/post.less","hash":"3a0afce471d5f5dbc5d5d0c8b7997e44a560944e","modified":1659230510946},{"_id":"themes/quiet/source/css/pages/tag.less","hash":"755ade4fec877912d071bebd783f90a01eede0fd","modified":1659230510946},{"_id":"themes/quiet/source/css/pages/tags.less","hash":"0f7ddd0ca583c543892734dae5e3613e495e9908","modified":1659230510946},{"_id":"themes/quiet/source/css/plugin/fancybox.css","hash":"cbce0cfc36f47e30e9c9824875f0b854a05f1916","modified":1659230510946},{"_id":"themes/quiet/source/css/plugin/gitalk.css","hash":"5663e9951ff23989672afe0a559abf1d8a114e8f","modified":1659230510946},{"_id":"themes/quiet/source/css/public/article_cente.less","hash":"b8e023cbebd15873157ffc5560e9f03714dc4d5d","modified":1659230510947},{"_id":"themes/quiet/source/css/public/color.less","hash":"eb152b594ddc29873d58bf1aa3d0d9898c33c726","modified":1659230510947},{"_id":"themes/quiet/source/css/public/content.less","hash":"7a9528cba1883537ba990b7680bb3fcdac7363cc","modified":1659230510947},{"_id":"themes/quiet/source/css/public/header_background.less","hash":"bb4e6c1bbacf0e4b714f4a0d534560cc51b45db1","modified":1659230510947},{"_id":"themes/quiet/source/css/public/mixins.less","hash":"a3b4c2f504a454bda7ebb705831763c4b0968cf9","modified":1659230510947},{"_id":"themes/quiet/source/css/widget/food.less","hash":"5374f82f9fd1bd6b4beef06c2443a16cc378e126","modified":1659230510947},{"_id":"themes/quiet/source/css/widget/grouping.less","hash":"50129c57e5367c483e62868d2aea460ab32c18cd","modified":1659230510948},{"_id":"themes/quiet/source/css/widget/header.less","hash":"dda759916684b58f9ecc8bb903cfcb3463164f3c","modified":1659230510948},{"_id":"themes/quiet/source/image/favicon.ico","hash":"fad2c16f133094e29f9c4aa8a946b7aa200ec98b","modified":1659230510948},{"_id":"themes/quiet/source/css/widget/header_body.less","hash":"30f31f96cafc2b7ae933c3f72c6f444ee904934f","modified":1659230510948},{"_id":"themes/quiet/source/js/fancybox.umd.js","hash":"d6203bf95728c98e8d12fdc8100f98da48260312","modified":1659230510949},{"_id":"themes/quiet/source/js/hljs.min.js","hash":"f599d9b58453de85ab2ee2e68b2702a3d55c0830","modified":1659230510954},{"_id":"themes/quiet/source/js/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1659230510955},{"_id":"themes/quiet/source/js/gitalk.min.js","hash":"8f0a3d5a46e23eeab52c965387a3ffcd7e00d723","modified":1659230510953},{"_id":"public/about/index.html","hash":"b7b9e32ad9b52c15297d8e3c26b8eff863a0eadd","modified":1675570309203},{"_id":"public/categories/index.html","hash":"d3b2a2a687489f55db7bd36bd3d410c0c456ae08","modified":1675570309203},{"_id":"public/links/index.html","hash":"6a566de7b2845a6da67dceab36670f32e74cf462","modified":1675570309203},{"_id":"public/tags/index.html","hash":"ee2005ccc25c239219092c38a2c60c3c97a6f82d","modified":1675570309203},{"_id":"public/2022/07/31/hello-world/index.html","hash":"84790a18ac3423f5cb455b0c01a9f45ad384a23f","modified":1659230788425},{"_id":"public/archives/index.html","hash":"38b32ac69b40391b54ab2a0e6682f535bed63dde","modified":1675570309203},{"_id":"public/archives/2022/index.html","hash":"821132b9f79a84c602d85383830e10d5b808b55f","modified":1659236154352},{"_id":"public/archives/2022/07/index.html","hash":"821132b9f79a84c602d85383830e10d5b808b55f","modified":1659236154352},{"_id":"public/index.html","hash":"9ffde011a3274b67e35d3e4de2028557b21b94e8","modified":1675570309203},{"_id":"public/image/favicon.ico","hash":"fad2c16f133094e29f9c4aa8a946b7aa200ec98b","modified":1659230788425},{"_id":"public/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1659230788425},{"_id":"public/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1659230788425},{"_id":"public/js/fancybox-images.js","hash":"1eee6b143f944bce1dab2a9f2141435e545bc537","modified":1659230788425},{"_id":"public/js/gotop.js","hash":"78f04d8833cf9916f71469fb80722004dce09b28","modified":1659230788425},{"_id":"public/js/index.js","hash":"2023e077272d3bfbc8c02791b402b6cf5ce6b118","modified":1659230788425},{"_id":"public/css/plugin/fancybox.css","hash":"cbce0cfc36f47e30e9c9824875f0b854a05f1916","modified":1659230788425},{"_id":"public/css/highlight/atom-one-dark.css","hash":"babf73b3a1b7b94627602a2e467830c9435d6665","modified":1659230788425},{"_id":"public/css/pages/about.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/pages/categories.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/pages/links.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/pages/post.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/pages/home.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/pages/tag.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/pages/tags.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/public/article_cente.css","hash":"0394d82e8ecb91e5f188c0e60669f8ad8228fa4a","modified":1659230788425},{"_id":"public/css/public/color.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/public/content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/pages/archive.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/public/header_background.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/public/mixins.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/widget/food.css","hash":"001fd1cee16fcc9821c2eb7a97385c3717f6cd93","modified":1659230788425},{"_id":"public/css/widget/grouping.css","hash":"bd9a14c36a397bff9e87cf0bb9c5a0563e5637bd","modified":1659230788425},{"_id":"public/css/widget/header.css","hash":"8d5d0f56a9aa4b94adabe0283b27a0d1ec9ac16c","modified":1659230788425},{"_id":"public/css/widget/header_body.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659230788425},{"_id":"public/css/plugin/gitalk.css","hash":"5663e9951ff23989672afe0a559abf1d8a114e8f","modified":1659230788425},{"_id":"public/css/index.css","hash":"641fdecdf3d7731dcfdc2f47c11cf503531fd09f","modified":1659230788425},{"_id":"public/js/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1659230788425},{"_id":"public/js/fancybox.umd.js","hash":"d6203bf95728c98e8d12fdc8100f98da48260312","modified":1659230788425},{"_id":"public/js/hljs.min.js","hash":"f599d9b58453de85ab2ee2e68b2702a3d55c0830","modified":1659230788425},{"_id":"public/js/gitalk.min.js","hash":"8f0a3d5a46e23eeab52c965387a3ffcd7e00d723","modified":1659230788425},{"_id":"public/2022/07/17/hello-world/index.html","hash":"d665bb907c51b16204642904dbf0f9aef478f79b","modified":1659236154352},{"_id":"source/_posts/GC.md","hash":"42226889605b6a5d12840dad2cfc575cb0659092","modified":1675565835719},{"_id":"source/_posts/垃圾回收机制.md","hash":"b7e7cbe5ce1ac535af78d2549d3562d072c2207f","modified":1675650492700},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1675566188631},{"_id":"public/archives/2023/index.html","hash":"38b32ac69b40391b54ab2a0e6682f535bed63dde","modified":1675570309203},{"_id":"public/archives/2023/02/index.html","hash":"38b32ac69b40391b54ab2a0e6682f535bed63dde","modified":1675570309203},{"_id":"public/2023/02/03/垃圾回收机制/index.html","hash":"973cc67531894d6b3413d2391c64e9531135b723","modified":1675570309203},{"_id":"source/_posts/.DS_Store","hash":"05744c71bae2e78e157e9eb651655d38296e990d","modified":1675583550083}],"Category":[{"name":"Javascript","_id":"clds8g0hr0000xws62t297bma"}],"Data":[],"Page":[{"title":"个人简介","date":"2020-11-02T16:00:00.000Z","aubot":"Cange-Q","portrait":"https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imgIMG_7327.jpeg","describe":"一个阳光快乐的BOY,在正合适的年龄里希望遇见正好的你。","type":"about","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2020-11-03\naubot: Cange-Q\nportrait: 'https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imgIMG_7327.jpeg'\ndescribe: '一个阳光快乐的BOY,在正合适的年龄里希望遇见正好的你。'\ntype: \"about\"\nlayout: \"about\"\ncomments: false\n---","updated":"2022-07-31T01:21:50.938Z","path":"about/index.html","_id":"cl68n2nx00000pde0hojhgg98","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2020-11-01T16:00:00.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2020-11-02\ntype: categories\nlayout: categories\n---","updated":"2022-07-31T01:21:50.939Z","path":"categories/index.html","comments":1,"_id":"cl68n2nx50002pde0d8wgaqg5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2020-09-18T16:00:00.000Z","type":"links","layout":"links","comments":0,"_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2020-09-19\ntype: \"links\"\nlayout: \"links\"\ncomments: false\n---","updated":"2022-07-31T01:21:50.939Z","path":"links/index.html","_id":"cl68n2nx60003pde0fu0cb1de","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-09-19T08:19:22.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-09-19 16:19:22\nlayout: \"tags\"\n---","updated":"2022-07-31T01:21:50.939Z","path":"tags/index.html","comments":1,"_id":"cl68n2nx70004pde0cssy1ua7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"V8中的JavaScript垃圾回收机制","cover":null,"_content":"\n# 浏览器垃圾的产生\n\n首先，我们要先明白在js中内存垃圾的定义是什么，在js内存管理策略中它会对失去**可达性**(无引用或者无法通过某种方式进行访问)的空间进行回收。既失去可达性的内存空间会被视为是垃圾\n在正常开发中，我们不可避免的会在程序中进行各种变量声明函数创建等操作，这些操作无疑都是需要从浏览器处进行内存申请，浏览器进行内存分配，但是如果我们在使用引用类型变量时更改了其引用地址，就导致之前被引用的堆地址失去可达性而被白白占用(参考下面代码例子)，如果变量变多这种被白白占用的地址会越来越多，导致新的变量能分配使用的内存会越来越小，系统运行速度会越来越慢，达到临界值时会导致系统崩溃\n\n```javascript\n let test = {\n    a: 1,\n    b: 2\n\n  }\n  // 上方引用地址无变量引用导致白白占用内存空间\n  test = [1, 2, 3, 4, 6]\n```\n\n# 垃圾回收机制\n\n由上文我们可以知道浏览器在运行程序时就会产生垃圾，但是正常情况我们开发时也从未主动去回收垃圾，那程序为何依旧能正常运作呢。那是因为JavaScript自己内部会定时(实时太消耗性能)通过GC(Garbage Collection)进行垃圾回收\n\n## 垃圾回收策略\n\n而在GC中常用的回收策略\n\n### 标记清除(Mark-Sweep)\n\n标记清除是JavaScript引擎中进行垃圾回收中使用到最多的算法，在目前主流的浏览器厂商中几乎都是可以看到标记清除算法，只不过不同浏览器厂商优化不同，而且不同的浏览器上运行的性能也有差异\n 而此算法主要核心分为两部分标记和清除\n 在代码执行阶段，为程序中所有的变量添加上一个二进制字符(二进制运算最快)并初始值置为0(默认全是垃圾)，然后遍历所有的对象，被使用的变量标记置为1，在程序运行结束时回收掉所有标记为零的变量，回收结束之后将现存变量标记统一置为0，等待下一轮回收开启\n\n#### 优点\n\n标记清除算法思路清晰，实现比较简单\n\n#### 缺点\n\n由于系统分配的内存时间不同，回收的先后顺序也是不同的，这时就会导致剩余空闲空间并不是连续的，出现了内存碎片现象\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45958c664c3c4f37ab84db61840756b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n内存碎片化之后，新的分配空间被分配时需要先计算一下满足符合要求的空间，增加了计算负担。同时如果后续系统需要分配的新变量使用空间很大，虽然系统总剩余内存是满足需求，但是并没有连续的满足需求的空间进行分配，这时可能会出现分配失败\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d7cb0228d2d4a399682271391c2d4af~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n所以虽然标记清除算法比较简单但是缺点也是很明显由于内存碎片的诞生导致的分配时间较长和空间浪费，所以只要解决掉内存碎片这个致命问题，这两个问题就会迎刃而解\n 这时候 **标记整理** (Mark-Compact)算法闪亮登场，他的清除逻辑和标记清除算法基本相似不过进行了优化，会在清除结束之后讲活着的空间进行整理向一端移动，同时清理掉内存的边界\n\n### 引用计数\n\n引用计数算法顾名思义，他的策略就是跟踪记录每个变量值被使用的次数，如果一个引用类型的值给一个声明的变量赋值，则将这个引用类型的值的引用次数为1，如果同一个值被又被赋值给另一个变量，则引用计数再加1，如果之前被赋值的变量值变更成了其他引用类型，则原本的引用类型引用计数减1，如果这个引用类型的引用计数为0时表示，此时为不可达状态，浏览器垃圾回收器就将此类型占用的空间进行回收掉(此处是实时的，当计数变为0既会被立即回收)\n\n#### 优点\n\n1、实时回收，引用计数当归零就立即进行回收操作。 2、不会暂停执行栈，标记清除算法定时进行垃圾回收时会先暂停程序运行，来进行垃圾回收，而引用计数是实时回收不会暂停程序的运行\n\n#### 缺点\n\n1、空间浪费，由于需要进行计数，所以需要开辟空间来存储计数器，同时由于引用无上限故占用空间也是无上限。 2、无法解决循环引用无法回收(致命问题)，循环引用既两个引用类型AB，A有一个地址指向了B,B也有一个对象指向了A,导致两者引用计数为2，正常情况下当test函数运行结束进行垃圾回收，但是AB两者的基数都不是0则回收失败，无法清除，这种情况大量发生时会造成大量的内存空间被浪费，故引用计数算法现在已经很少使用逐渐被标记清除算法替代\n\n```css\n  function test() {\n    let A = new Object()\n    let B = new Object()\n    B.a = A\n    A.b = B\n  }\n```\n\n# V8对GC的优化\n\n## 分代式优化\n\n之前GC的清除算法无论是标记清除还是标记整理，在进行回收时都需要检查内存中的所有对象，但是如果存在一些，体积大，存活时间长，创建早的内存来进行检查，相当于是做了无用功，而新创建，体积小和存活时间短的对象需要更加频繁的检查所以基于这个问题V8提出了新生代和老生代的优化策略。将内存空间划分为新生代和老生代两个部分，不同部分执行不同的回收策略。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79967c264db445d2a0b7474d5785ee13~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n### 新生代\n\n顾名思义新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持 1～8M 的容量。 而新生代中的内存又会被拆分为两部分，使用区和空闲区，浏览器进行内存申请时分配使用区空间，当使用区空间快被写满时则进行一次垃圾回收，新生代的垃圾回收器会对使用区的活动对象进行标记，标记完成之后将使用区活跃的对象复制到空闲区，并进行排序，随后进入垃圾清理阶段，对使用区进行清理，清理操作完成之后，使用区和空闲区进行角色互换，之前的空闲区变成新的使用区，之前的使用区变成新的空闲区，循环往复。\n\n当一个对象被多次复制还未被清理掉，故此对象会被认定为生命周期较长的对象，会被从新生代移动到老生代中，采用老生代的垃圾回收机制管理。\n\n不过还需要注意一个特殊情况，如果新生代的复制一个对象到空闲区，如果空闲区的使用空间超过25%之后这个对象会被立即复制到老生代，而25%的红线要求是为了保证进行空闲区和使用区翻转时对于新的对象分配空间操作不会被影响。\n\n### 老生代\n\n相比于新生代，老生代顾名思义存放的就是一些生命周期比较长，经过多次新生代垃圾回收还存在的对象，同样的相比于新生代不仅垃圾回收频率较低，存储空间也是比新生代大的多。而老生代的回收算法就比较简单就是标记清除算法，不过在v8中为了处理标记清除算法产生的内存碎片问题，使用了标记整理算法进行空间优化大大提高了回收效率。\n\n## 并行回收\n\n众所周知JavaScript是一门单线程语言，所以在进行GC回收时会阻塞js脚本的运行导致系统停顿，等GC回收结束后恢复运行，这被称为全停顿。\n\n但是这样的话会存在极大的风险，如果GC回收时间较长，就会导致系统停顿时间较长这是不可被接受的。所以V8引擎加入了并行回收的优化机制，在开启GC回收线程之后，会同时开启多个辅助线程进行处理，提高回处理时间，虽然增加了一部分线程之间协调的时间，但是总时间比一个线程用时来讲大大的缩短。避免系统卡顿时间过长。\n\n## 增量标记\n\n由于全停顿标记策略在处理老生代垃圾回收时即使是有并行处理优化但是消耗时间也会消耗大量的时间，所以在2011年时V8团队又提出了增量标记策略来进行优化。\n 增量标记思想就是将一次GC标记过程进行拆分，一次执行一小部分，执行完毕后继续执行脚本，执行一段脚本之后又继续执行刚刚拆分的GC标记任务，循环往复直至这次GC标记完成。\n\n### 三色标记法(恢复与暂停)\n\n在引入三色标记法之前的GC标记只是将活动的变量标记为黑色，不活动的变量标记为白色，当GC标记过程结束之后，系统会回收掉所有的白色标记变量，但是这种非黑即白的方法虽然清除起来非常方便但是存在一个问题执行一段时间之后无法知道执行到了哪里，不能进行暂停。所以V8又引入了一个灰色进行暂停和恢复操作。\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41fda88ed208434d800a1f258be59f4d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n如图所示，在GC标记开始时所有对象都是白色的，然后从根对象开始进行标记，先将这组对象标记为灰色然后进行记录，如果此时进行中断，后续恢复时既从灰色标记时开始即可，当回收器从标记工作表中弹出对象并访问他们的引用对象时，会将灰色置为黑色，同时将下一个引用对象置为灰色，继续往下进行标记工作。直至无可标记为灰色对象为止，此时表示GC标记过程结束，将所有未标记的变量进行回收工作。所以三色标记法可以渐进执行而不用每次执行都要全盘进行扫描整个内存空间，可以配合增量回收减少全停顿时间，提升体验\n\n### 写屏障\n\n在一次完成GC标记暂停中，如果执行任务程序时内存中存在的变量引用关系被改变了，这样会导致此次GC存在问题。所以V8团队提出了写屏障作为保护。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36a75580ea724bdabffce8fbcedd0c17~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n如图所示，现有A、B、C三个对象依次被引用，且在GC过程中已经被标记了，但是在暂停GC任务，插入执行程序任务之后，引用关系被改变了，新增了一个新变量D，但是此时程序中也未存在灰色标记的变量，下一步进行清除机制时，新变量D按清除机制来讲是要被清除掉，但是这是极其不合理的，一个新的变量还存在引用就被回收掉，这会导致程序云行报错。此时写屏障机制就派上用场了，一旦有黑色的对象引用白色的对象，就会强制将被引用的白色变量标记为灰色，保证下一次的增量GC正确运行，这个机制称为强三色不变性(白色变量D被黑色变量B引用之后会被强制置灰保证程序运行正确性)。\n\n### 惰性清理\n\n在增量GC标记之后下一步就是来真正回收内存空间，通过惰性清理来进行清除释放内存。惰性清理机制运行原理是在进行回收时如果内存足够就可以将这个回收清理时间稍微延迟一下，让JavaScript脚本先执行，清理时也不会一下全部清理掉所有的垃圾，会根据按需进行清理直至所有垃圾都回收完毕，然后继续等待下个GC标记阶段执行结束。\n\n### 并发回收\n\n虽然增量标记和惰性清理的出现使主线程停顿时间大大减少了，但是总体的停顿时间其实并未减少，如果真正细算起来甚至还增加了，应用程序的吞吐量也被降低，不过用户和浏览器的交互体验大大提升牺牲也是值得的。但是后续V8团队为了使回收更加高效， 又使用了并发回收机制，他是在主线程在执行程序任务时，主动开启辅助线程进行GC回收。而主线程又可以自由执行而不会挂起(标记操作全部由辅助进程操作)。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dab8f88e33e94c038f73b57e268c58b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n# 总结\n\n综合上文的知识点V8引擎的垃圾回收机制也逐渐揭开:分代式策略是V8里面垃圾回收机制的中流砥柱， 只不过老生代的垃圾回收略显麻烦为了优化性能和体验开发团队煞费苦心，在GC标记阶段通过并发回收策略开启辅助线程完成标记操作，清理操作时通过增量任务和惰性回收策略进行清理(同时也会开启辅助线程进行清理)大大提升了回收效率提高了人机交互的体验感。不得不说当下web式应用程序能够飞速发展少不了V8引擎的一份力\n\n","source":"_posts/垃圾回收机制.md","raw":"---\ntitle: V8中的JavaScript垃圾回收机制\ncategory: Javascript\ncover: \n---\n\n# 浏览器垃圾的产生\n\n首先，我们要先明白在js中内存垃圾的定义是什么，在js内存管理策略中它会对失去**可达性**(无引用或者无法通过某种方式进行访问)的空间进行回收。既失去可达性的内存空间会被视为是垃圾\n在正常开发中，我们不可避免的会在程序中进行各种变量声明函数创建等操作，这些操作无疑都是需要从浏览器处进行内存申请，浏览器进行内存分配，但是如果我们在使用引用类型变量时更改了其引用地址，就导致之前被引用的堆地址失去可达性而被白白占用(参考下面代码例子)，如果变量变多这种被白白占用的地址会越来越多，导致新的变量能分配使用的内存会越来越小，系统运行速度会越来越慢，达到临界值时会导致系统崩溃\n\n```javascript\n let test = {\n    a: 1,\n    b: 2\n\n  }\n  // 上方引用地址无变量引用导致白白占用内存空间\n  test = [1, 2, 3, 4, 6]\n```\n\n# 垃圾回收机制\n\n由上文我们可以知道浏览器在运行程序时就会产生垃圾，但是正常情况我们开发时也从未主动去回收垃圾，那程序为何依旧能正常运作呢。那是因为JavaScript自己内部会定时(实时太消耗性能)通过GC(Garbage Collection)进行垃圾回收\n\n## 垃圾回收策略\n\n而在GC中常用的回收策略\n\n### 标记清除(Mark-Sweep)\n\n标记清除是JavaScript引擎中进行垃圾回收中使用到最多的算法，在目前主流的浏览器厂商中几乎都是可以看到标记清除算法，只不过不同浏览器厂商优化不同，而且不同的浏览器上运行的性能也有差异\n 而此算法主要核心分为两部分标记和清除\n 在代码执行阶段，为程序中所有的变量添加上一个二进制字符(二进制运算最快)并初始值置为0(默认全是垃圾)，然后遍历所有的对象，被使用的变量标记置为1，在程序运行结束时回收掉所有标记为零的变量，回收结束之后将现存变量标记统一置为0，等待下一轮回收开启\n\n#### 优点\n\n标记清除算法思路清晰，实现比较简单\n\n#### 缺点\n\n由于系统分配的内存时间不同，回收的先后顺序也是不同的，这时就会导致剩余空闲空间并不是连续的，出现了内存碎片现象\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45958c664c3c4f37ab84db61840756b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n内存碎片化之后，新的分配空间被分配时需要先计算一下满足符合要求的空间，增加了计算负担。同时如果后续系统需要分配的新变量使用空间很大，虽然系统总剩余内存是满足需求，但是并没有连续的满足需求的空间进行分配，这时可能会出现分配失败\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d7cb0228d2d4a399682271391c2d4af~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n所以虽然标记清除算法比较简单但是缺点也是很明显由于内存碎片的诞生导致的分配时间较长和空间浪费，所以只要解决掉内存碎片这个致命问题，这两个问题就会迎刃而解\n 这时候 **标记整理** (Mark-Compact)算法闪亮登场，他的清除逻辑和标记清除算法基本相似不过进行了优化，会在清除结束之后讲活着的空间进行整理向一端移动，同时清理掉内存的边界\n\n### 引用计数\n\n引用计数算法顾名思义，他的策略就是跟踪记录每个变量值被使用的次数，如果一个引用类型的值给一个声明的变量赋值，则将这个引用类型的值的引用次数为1，如果同一个值被又被赋值给另一个变量，则引用计数再加1，如果之前被赋值的变量值变更成了其他引用类型，则原本的引用类型引用计数减1，如果这个引用类型的引用计数为0时表示，此时为不可达状态，浏览器垃圾回收器就将此类型占用的空间进行回收掉(此处是实时的，当计数变为0既会被立即回收)\n\n#### 优点\n\n1、实时回收，引用计数当归零就立即进行回收操作。 2、不会暂停执行栈，标记清除算法定时进行垃圾回收时会先暂停程序运行，来进行垃圾回收，而引用计数是实时回收不会暂停程序的运行\n\n#### 缺点\n\n1、空间浪费，由于需要进行计数，所以需要开辟空间来存储计数器，同时由于引用无上限故占用空间也是无上限。 2、无法解决循环引用无法回收(致命问题)，循环引用既两个引用类型AB，A有一个地址指向了B,B也有一个对象指向了A,导致两者引用计数为2，正常情况下当test函数运行结束进行垃圾回收，但是AB两者的基数都不是0则回收失败，无法清除，这种情况大量发生时会造成大量的内存空间被浪费，故引用计数算法现在已经很少使用逐渐被标记清除算法替代\n\n```css\n  function test() {\n    let A = new Object()\n    let B = new Object()\n    B.a = A\n    A.b = B\n  }\n```\n\n# V8对GC的优化\n\n## 分代式优化\n\n之前GC的清除算法无论是标记清除还是标记整理，在进行回收时都需要检查内存中的所有对象，但是如果存在一些，体积大，存活时间长，创建早的内存来进行检查，相当于是做了无用功，而新创建，体积小和存活时间短的对象需要更加频繁的检查所以基于这个问题V8提出了新生代和老生代的优化策略。将内存空间划分为新生代和老生代两个部分，不同部分执行不同的回收策略。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79967c264db445d2a0b7474d5785ee13~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n### 新生代\n\n顾名思义新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持 1～8M 的容量。 而新生代中的内存又会被拆分为两部分，使用区和空闲区，浏览器进行内存申请时分配使用区空间，当使用区空间快被写满时则进行一次垃圾回收，新生代的垃圾回收器会对使用区的活动对象进行标记，标记完成之后将使用区活跃的对象复制到空闲区，并进行排序，随后进入垃圾清理阶段，对使用区进行清理，清理操作完成之后，使用区和空闲区进行角色互换，之前的空闲区变成新的使用区，之前的使用区变成新的空闲区，循环往复。\n\n当一个对象被多次复制还未被清理掉，故此对象会被认定为生命周期较长的对象，会被从新生代移动到老生代中，采用老生代的垃圾回收机制管理。\n\n不过还需要注意一个特殊情况，如果新生代的复制一个对象到空闲区，如果空闲区的使用空间超过25%之后这个对象会被立即复制到老生代，而25%的红线要求是为了保证进行空闲区和使用区翻转时对于新的对象分配空间操作不会被影响。\n\n### 老生代\n\n相比于新生代，老生代顾名思义存放的就是一些生命周期比较长，经过多次新生代垃圾回收还存在的对象，同样的相比于新生代不仅垃圾回收频率较低，存储空间也是比新生代大的多。而老生代的回收算法就比较简单就是标记清除算法，不过在v8中为了处理标记清除算法产生的内存碎片问题，使用了标记整理算法进行空间优化大大提高了回收效率。\n\n## 并行回收\n\n众所周知JavaScript是一门单线程语言，所以在进行GC回收时会阻塞js脚本的运行导致系统停顿，等GC回收结束后恢复运行，这被称为全停顿。\n\n但是这样的话会存在极大的风险，如果GC回收时间较长，就会导致系统停顿时间较长这是不可被接受的。所以V8引擎加入了并行回收的优化机制，在开启GC回收线程之后，会同时开启多个辅助线程进行处理，提高回处理时间，虽然增加了一部分线程之间协调的时间，但是总时间比一个线程用时来讲大大的缩短。避免系统卡顿时间过长。\n\n## 增量标记\n\n由于全停顿标记策略在处理老生代垃圾回收时即使是有并行处理优化但是消耗时间也会消耗大量的时间，所以在2011年时V8团队又提出了增量标记策略来进行优化。\n 增量标记思想就是将一次GC标记过程进行拆分，一次执行一小部分，执行完毕后继续执行脚本，执行一段脚本之后又继续执行刚刚拆分的GC标记任务，循环往复直至这次GC标记完成。\n\n### 三色标记法(恢复与暂停)\n\n在引入三色标记法之前的GC标记只是将活动的变量标记为黑色，不活动的变量标记为白色，当GC标记过程结束之后，系统会回收掉所有的白色标记变量，但是这种非黑即白的方法虽然清除起来非常方便但是存在一个问题执行一段时间之后无法知道执行到了哪里，不能进行暂停。所以V8又引入了一个灰色进行暂停和恢复操作。\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41fda88ed208434d800a1f258be59f4d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n如图所示，在GC标记开始时所有对象都是白色的，然后从根对象开始进行标记，先将这组对象标记为灰色然后进行记录，如果此时进行中断，后续恢复时既从灰色标记时开始即可，当回收器从标记工作表中弹出对象并访问他们的引用对象时，会将灰色置为黑色，同时将下一个引用对象置为灰色，继续往下进行标记工作。直至无可标记为灰色对象为止，此时表示GC标记过程结束，将所有未标记的变量进行回收工作。所以三色标记法可以渐进执行而不用每次执行都要全盘进行扫描整个内存空间，可以配合增量回收减少全停顿时间，提升体验\n\n### 写屏障\n\n在一次完成GC标记暂停中，如果执行任务程序时内存中存在的变量引用关系被改变了，这样会导致此次GC存在问题。所以V8团队提出了写屏障作为保护。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36a75580ea724bdabffce8fbcedd0c17~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n如图所示，现有A、B、C三个对象依次被引用，且在GC过程中已经被标记了，但是在暂停GC任务，插入执行程序任务之后，引用关系被改变了，新增了一个新变量D，但是此时程序中也未存在灰色标记的变量，下一步进行清除机制时，新变量D按清除机制来讲是要被清除掉，但是这是极其不合理的，一个新的变量还存在引用就被回收掉，这会导致程序云行报错。此时写屏障机制就派上用场了，一旦有黑色的对象引用白色的对象，就会强制将被引用的白色变量标记为灰色，保证下一次的增量GC正确运行，这个机制称为强三色不变性(白色变量D被黑色变量B引用之后会被强制置灰保证程序运行正确性)。\n\n### 惰性清理\n\n在增量GC标记之后下一步就是来真正回收内存空间，通过惰性清理来进行清除释放内存。惰性清理机制运行原理是在进行回收时如果内存足够就可以将这个回收清理时间稍微延迟一下，让JavaScript脚本先执行，清理时也不会一下全部清理掉所有的垃圾，会根据按需进行清理直至所有垃圾都回收完毕，然后继续等待下个GC标记阶段执行结束。\n\n### 并发回收\n\n虽然增量标记和惰性清理的出现使主线程停顿时间大大减少了，但是总体的停顿时间其实并未减少，如果真正细算起来甚至还增加了，应用程序的吞吐量也被降低，不过用户和浏览器的交互体验大大提升牺牲也是值得的。但是后续V8团队为了使回收更加高效， 又使用了并发回收机制，他是在主线程在执行程序任务时，主动开启辅助线程进行GC回收。而主线程又可以自由执行而不会挂起(标记操作全部由辅助进程操作)。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dab8f88e33e94c038f73b57e268c58b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\n\n# 总结\n\n综合上文的知识点V8引擎的垃圾回收机制也逐渐揭开:分代式策略是V8里面垃圾回收机制的中流砥柱， 只不过老生代的垃圾回收略显麻烦为了优化性能和体验开发团队煞费苦心，在GC标记阶段通过并发回收策略开启辅助线程完成标记操作，清理操作时通过增量任务和惰性回收策略进行清理(同时也会开启辅助线程进行清理)大大提升了回收效率提高了人机交互的体验感。不得不说当下web式应用程序能够飞速发展少不了V8引擎的一份力\n\n","slug":"垃圾回收机制","published":1,"date":"2023-02-03T10:02:00.764Z","updated":"2023-02-06T02:28:12.700Z","_id":"cldqt8vn40000jps6cgvt9fle","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"浏览器垃圾的产生\"><a href=\"#浏览器垃圾的产生\" class=\"headerlink\" title=\"浏览器垃圾的产生\"></a>浏览器垃圾的产生</h1><p>首先，我们要先明白在js中内存垃圾的定义是什么，在js内存管理策略中它会对失去<strong>可达性</strong>(无引用或者无法通过某种方式进行访问)的空间进行回收。既失去可达性的内存空间会被视为是垃圾<br>在正常开发中，我们不可避免的会在程序中进行各种变量声明函数创建等操作，这些操作无疑都是需要从浏览器处进行内存申请，浏览器进行内存分配，但是如果我们在使用引用类型变量时更改了其引用地址，就导致之前被引用的堆地址失去可达性而被白白占用(参考下面代码例子)，如果变量变多这种被白白占用的地址会越来越多，导致新的变量能分配使用的内存会越来越小，系统运行速度会越来越慢，达到临界值时会导致系统崩溃</p>\n<pre><code class=\"javascript\"> let test = &#123;\n    a: 1,\n    b: 2\n\n  &#125;\n  // 上方引用地址无变量引用导致白白占用内存空间\n  test = [1, 2, 3, 4, 6]\n</code></pre>\n<h1 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h1><p>由上文我们可以知道浏览器在运行程序时就会产生垃圾，但是正常情况我们开发时也从未主动去回收垃圾，那程序为何依旧能正常运作呢。那是因为JavaScript自己内部会定时(实时太消耗性能)通过GC(Garbage Collection)进行垃圾回收</p>\n<h2 id=\"垃圾回收策略\"><a href=\"#垃圾回收策略\" class=\"headerlink\" title=\"垃圾回收策略\"></a>垃圾回收策略</h2><p>而在GC中常用的回收策略</p>\n<h3 id=\"标记清除-Mark-Sweep\"><a href=\"#标记清除-Mark-Sweep\" class=\"headerlink\" title=\"标记清除(Mark-Sweep)\"></a>标记清除(Mark-Sweep)</h3><p>标记清除是JavaScript引擎中进行垃圾回收中使用到最多的算法，在目前主流的浏览器厂商中几乎都是可以看到标记清除算法，只不过不同浏览器厂商优化不同，而且不同的浏览器上运行的性能也有差异<br> 而此算法主要核心分为两部分标记和清除<br> 在代码执行阶段，为程序中所有的变量添加上一个二进制字符(二进制运算最快)并初始值置为0(默认全是垃圾)，然后遍历所有的对象，被使用的变量标记置为1，在程序运行结束时回收掉所有标记为零的变量，回收结束之后将现存变量标记统一置为0，等待下一轮回收开启</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>标记清除算法思路清晰，实现比较简单</p>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>由于系统分配的内存时间不同，回收的先后顺序也是不同的，这时就会导致剩余空闲空间并不是连续的，出现了内存碎片现象</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45958c664c3c4f37ab84db61840756b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>内存碎片化之后，新的分配空间被分配时需要先计算一下满足符合要求的空间，增加了计算负担。同时如果后续系统需要分配的新变量使用空间很大，虽然系统总剩余内存是满足需求，但是并没有连续的满足需求的空间进行分配，这时可能会出现分配失败</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d7cb0228d2d4a399682271391c2d4af~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>所以虽然标记清除算法比较简单但是缺点也是很明显由于内存碎片的诞生导致的分配时间较长和空间浪费，所以只要解决掉内存碎片这个致命问题，这两个问题就会迎刃而解<br> 这时候 <strong>标记整理</strong> (Mark-Compact)算法闪亮登场，他的清除逻辑和标记清除算法基本相似不过进行了优化，会在清除结束之后讲活着的空间进行整理向一端移动，同时清理掉内存的边界</p>\n<h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>引用计数算法顾名思义，他的策略就是跟踪记录每个变量值被使用的次数，如果一个引用类型的值给一个声明的变量赋值，则将这个引用类型的值的引用次数为1，如果同一个值被又被赋值给另一个变量，则引用计数再加1，如果之前被赋值的变量值变更成了其他引用类型，则原本的引用类型引用计数减1，如果这个引用类型的引用计数为0时表示，此时为不可达状态，浏览器垃圾回收器就将此类型占用的空间进行回收掉(此处是实时的，当计数变为0既会被立即回收)</p>\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>1、实时回收，引用计数当归零就立即进行回收操作。 2、不会暂停执行栈，标记清除算法定时进行垃圾回收时会先暂停程序运行，来进行垃圾回收，而引用计数是实时回收不会暂停程序的运行</p>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>1、空间浪费，由于需要进行计数，所以需要开辟空间来存储计数器，同时由于引用无上限故占用空间也是无上限。 2、无法解决循环引用无法回收(致命问题)，循环引用既两个引用类型AB，A有一个地址指向了B,B也有一个对象指向了A,导致两者引用计数为2，正常情况下当test函数运行结束进行垃圾回收，但是AB两者的基数都不是0则回收失败，无法清除，这种情况大量发生时会造成大量的内存空间被浪费，故引用计数算法现在已经很少使用逐渐被标记清除算法替代</p>\n<pre><code class=\"css\">  function test() &#123;\n    let A = new Object()\n    let B = new Object()\n    B.a = A\n    A.b = B\n  &#125;\n</code></pre>\n<h1 id=\"V8对GC的优化\"><a href=\"#V8对GC的优化\" class=\"headerlink\" title=\"V8对GC的优化\"></a>V8对GC的优化</h1><h2 id=\"分代式优化\"><a href=\"#分代式优化\" class=\"headerlink\" title=\"分代式优化\"></a>分代式优化</h2><p>之前GC的清除算法无论是标记清除还是标记整理，在进行回收时都需要检查内存中的所有对象，但是如果存在一些，体积大，存活时间长，创建早的内存来进行检查，相当于是做了无用功，而新创建，体积小和存活时间短的对象需要更加频繁的检查所以基于这个问题V8提出了新生代和老生代的优化策略。将内存空间划分为新生代和老生代两个部分，不同部分执行不同的回收策略。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79967c264db445d2a0b7474d5785ee13~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<h3 id=\"新生代\"><a href=\"#新生代\" class=\"headerlink\" title=\"新生代\"></a>新生代</h3><p>顾名思义新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持 1～8M 的容量。 而新生代中的内存又会被拆分为两部分，使用区和空闲区，浏览器进行内存申请时分配使用区空间，当使用区空间快被写满时则进行一次垃圾回收，新生代的垃圾回收器会对使用区的活动对象进行标记，标记完成之后将使用区活跃的对象复制到空闲区，并进行排序，随后进入垃圾清理阶段，对使用区进行清理，清理操作完成之后，使用区和空闲区进行角色互换，之前的空闲区变成新的使用区，之前的使用区变成新的空闲区，循环往复。</p>\n<p>当一个对象被多次复制还未被清理掉，故此对象会被认定为生命周期较长的对象，会被从新生代移动到老生代中，采用老生代的垃圾回收机制管理。</p>\n<p>不过还需要注意一个特殊情况，如果新生代的复制一个对象到空闲区，如果空闲区的使用空间超过25%之后这个对象会被立即复制到老生代，而25%的红线要求是为了保证进行空闲区和使用区翻转时对于新的对象分配空间操作不会被影响。</p>\n<h3 id=\"老生代\"><a href=\"#老生代\" class=\"headerlink\" title=\"老生代\"></a>老生代</h3><p>相比于新生代，老生代顾名思义存放的就是一些生命周期比较长，经过多次新生代垃圾回收还存在的对象，同样的相比于新生代不仅垃圾回收频率较低，存储空间也是比新生代大的多。而老生代的回收算法就比较简单就是标记清除算法，不过在v8中为了处理标记清除算法产生的内存碎片问题，使用了标记整理算法进行空间优化大大提高了回收效率。</p>\n<h2 id=\"并行回收\"><a href=\"#并行回收\" class=\"headerlink\" title=\"并行回收\"></a>并行回收</h2><p>众所周知JavaScript是一门单线程语言，所以在进行GC回收时会阻塞js脚本的运行导致系统停顿，等GC回收结束后恢复运行，这被称为全停顿。</p>\n<p>但是这样的话会存在极大的风险，如果GC回收时间较长，就会导致系统停顿时间较长这是不可被接受的。所以V8引擎加入了并行回收的优化机制，在开启GC回收线程之后，会同时开启多个辅助线程进行处理，提高回处理时间，虽然增加了一部分线程之间协调的时间，但是总时间比一个线程用时来讲大大的缩短。避免系统卡顿时间过长。</p>\n<h2 id=\"增量标记\"><a href=\"#增量标记\" class=\"headerlink\" title=\"增量标记\"></a>增量标记</h2><p>由于全停顿标记策略在处理老生代垃圾回收时即使是有并行处理优化但是消耗时间也会消耗大量的时间，所以在2011年时V8团队又提出了增量标记策略来进行优化。<br> 增量标记思想就是将一次GC标记过程进行拆分，一次执行一小部分，执行完毕后继续执行脚本，执行一段脚本之后又继续执行刚刚拆分的GC标记任务，循环往复直至这次GC标记完成。</p>\n<h3 id=\"三色标记法-恢复与暂停\"><a href=\"#三色标记法-恢复与暂停\" class=\"headerlink\" title=\"三色标记法(恢复与暂停)\"></a>三色标记法(恢复与暂停)</h3><p>在引入三色标记法之前的GC标记只是将活动的变量标记为黑色，不活动的变量标记为白色，当GC标记过程结束之后，系统会回收掉所有的白色标记变量，但是这种非黑即白的方法虽然清除起来非常方便但是存在一个问题执行一段时间之后无法知道执行到了哪里，不能进行暂停。所以V8又引入了一个灰色进行暂停和恢复操作。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41fda88ed208434d800a1f258be59f4d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>如图所示，在GC标记开始时所有对象都是白色的，然后从根对象开始进行标记，先将这组对象标记为灰色然后进行记录，如果此时进行中断，后续恢复时既从灰色标记时开始即可，当回收器从标记工作表中弹出对象并访问他们的引用对象时，会将灰色置为黑色，同时将下一个引用对象置为灰色，继续往下进行标记工作。直至无可标记为灰色对象为止，此时表示GC标记过程结束，将所有未标记的变量进行回收工作。所以三色标记法可以渐进执行而不用每次执行都要全盘进行扫描整个内存空间，可以配合增量回收减少全停顿时间，提升体验</p>\n<h3 id=\"写屏障\"><a href=\"#写屏障\" class=\"headerlink\" title=\"写屏障\"></a>写屏障</h3><p>在一次完成GC标记暂停中，如果执行任务程序时内存中存在的变量引用关系被改变了，这样会导致此次GC存在问题。所以V8团队提出了写屏障作为保护。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36a75580ea724bdabffce8fbcedd0c17~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>如图所示，现有A、B、C三个对象依次被引用，且在GC过程中已经被标记了，但是在暂停GC任务，插入执行程序任务之后，引用关系被改变了，新增了一个新变量D，但是此时程序中也未存在灰色标记的变量，下一步进行清除机制时，新变量D按清除机制来讲是要被清除掉，但是这是极其不合理的，一个新的变量还存在引用就被回收掉，这会导致程序云行报错。此时写屏障机制就派上用场了，一旦有黑色的对象引用白色的对象，就会强制将被引用的白色变量标记为灰色，保证下一次的增量GC正确运行，这个机制称为强三色不变性(白色变量D被黑色变量B引用之后会被强制置灰保证程序运行正确性)。</p>\n<h3 id=\"惰性清理\"><a href=\"#惰性清理\" class=\"headerlink\" title=\"惰性清理\"></a>惰性清理</h3><p>在增量GC标记之后下一步就是来真正回收内存空间，通过惰性清理来进行清除释放内存。惰性清理机制运行原理是在进行回收时如果内存足够就可以将这个回收清理时间稍微延迟一下，让JavaScript脚本先执行，清理时也不会一下全部清理掉所有的垃圾，会根据按需进行清理直至所有垃圾都回收完毕，然后继续等待下个GC标记阶段执行结束。</p>\n<h3 id=\"并发回收\"><a href=\"#并发回收\" class=\"headerlink\" title=\"并发回收\"></a>并发回收</h3><p>虽然增量标记和惰性清理的出现使主线程停顿时间大大减少了，但是总体的停顿时间其实并未减少，如果真正细算起来甚至还增加了，应用程序的吞吐量也被降低，不过用户和浏览器的交互体验大大提升牺牲也是值得的。但是后续V8团队为了使回收更加高效， 又使用了并发回收机制，他是在主线程在执行程序任务时，主动开启辅助线程进行GC回收。而主线程又可以自由执行而不会挂起(标记操作全部由辅助进程操作)。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dab8f88e33e94c038f73b57e268c58b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>综合上文的知识点V8引擎的垃圾回收机制也逐渐揭开:分代式策略是V8里面垃圾回收机制的中流砥柱， 只不过老生代的垃圾回收略显麻烦为了优化性能和体验开发团队煞费苦心，在GC标记阶段通过并发回收策略开启辅助线程完成标记操作，清理操作时通过增量任务和惰性回收策略进行清理(同时也会开启辅助线程进行清理)大大提升了回收效率提高了人机交互的体验感。不得不说当下web式应用程序能够飞速发展少不了V8引擎的一份力</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浏览器垃圾的产生\"><a href=\"#浏览器垃圾的产生\" class=\"headerlink\" title=\"浏览器垃圾的产生\"></a>浏览器垃圾的产生</h1><p>首先，我们要先明白在js中内存垃圾的定义是什么，在js内存管理策略中它会对失去<strong>可达性</strong>(无引用或者无法通过某种方式进行访问)的空间进行回收。既失去可达性的内存空间会被视为是垃圾<br>在正常开发中，我们不可避免的会在程序中进行各种变量声明函数创建等操作，这些操作无疑都是需要从浏览器处进行内存申请，浏览器进行内存分配，但是如果我们在使用引用类型变量时更改了其引用地址，就导致之前被引用的堆地址失去可达性而被白白占用(参考下面代码例子)，如果变量变多这种被白白占用的地址会越来越多，导致新的变量能分配使用的内存会越来越小，系统运行速度会越来越慢，达到临界值时会导致系统崩溃</p>\n<pre><code class=\"javascript\"> let test = &#123;\n    a: 1,\n    b: 2\n\n  &#125;\n  // 上方引用地址无变量引用导致白白占用内存空间\n  test = [1, 2, 3, 4, 6]\n</code></pre>\n<h1 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h1><p>由上文我们可以知道浏览器在运行程序时就会产生垃圾，但是正常情况我们开发时也从未主动去回收垃圾，那程序为何依旧能正常运作呢。那是因为JavaScript自己内部会定时(实时太消耗性能)通过GC(Garbage Collection)进行垃圾回收</p>\n<h2 id=\"垃圾回收策略\"><a href=\"#垃圾回收策略\" class=\"headerlink\" title=\"垃圾回收策略\"></a>垃圾回收策略</h2><p>而在GC中常用的回收策略</p>\n<h3 id=\"标记清除-Mark-Sweep\"><a href=\"#标记清除-Mark-Sweep\" class=\"headerlink\" title=\"标记清除(Mark-Sweep)\"></a>标记清除(Mark-Sweep)</h3><p>标记清除是JavaScript引擎中进行垃圾回收中使用到最多的算法，在目前主流的浏览器厂商中几乎都是可以看到标记清除算法，只不过不同浏览器厂商优化不同，而且不同的浏览器上运行的性能也有差异<br> 而此算法主要核心分为两部分标记和清除<br> 在代码执行阶段，为程序中所有的变量添加上一个二进制字符(二进制运算最快)并初始值置为0(默认全是垃圾)，然后遍历所有的对象，被使用的变量标记置为1，在程序运行结束时回收掉所有标记为零的变量，回收结束之后将现存变量标记统一置为0，等待下一轮回收开启</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>标记清除算法思路清晰，实现比较简单</p>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>由于系统分配的内存时间不同，回收的先后顺序也是不同的，这时就会导致剩余空闲空间并不是连续的，出现了内存碎片现象</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45958c664c3c4f37ab84db61840756b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>内存碎片化之后，新的分配空间被分配时需要先计算一下满足符合要求的空间，增加了计算负担。同时如果后续系统需要分配的新变量使用空间很大，虽然系统总剩余内存是满足需求，但是并没有连续的满足需求的空间进行分配，这时可能会出现分配失败</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d7cb0228d2d4a399682271391c2d4af~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>所以虽然标记清除算法比较简单但是缺点也是很明显由于内存碎片的诞生导致的分配时间较长和空间浪费，所以只要解决掉内存碎片这个致命问题，这两个问题就会迎刃而解<br> 这时候 <strong>标记整理</strong> (Mark-Compact)算法闪亮登场，他的清除逻辑和标记清除算法基本相似不过进行了优化，会在清除结束之后讲活着的空间进行整理向一端移动，同时清理掉内存的边界</p>\n<h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>引用计数算法顾名思义，他的策略就是跟踪记录每个变量值被使用的次数，如果一个引用类型的值给一个声明的变量赋值，则将这个引用类型的值的引用次数为1，如果同一个值被又被赋值给另一个变量，则引用计数再加1，如果之前被赋值的变量值变更成了其他引用类型，则原本的引用类型引用计数减1，如果这个引用类型的引用计数为0时表示，此时为不可达状态，浏览器垃圾回收器就将此类型占用的空间进行回收掉(此处是实时的，当计数变为0既会被立即回收)</p>\n<h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>1、实时回收，引用计数当归零就立即进行回收操作。 2、不会暂停执行栈，标记清除算法定时进行垃圾回收时会先暂停程序运行，来进行垃圾回收，而引用计数是实时回收不会暂停程序的运行</p>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>1、空间浪费，由于需要进行计数，所以需要开辟空间来存储计数器，同时由于引用无上限故占用空间也是无上限。 2、无法解决循环引用无法回收(致命问题)，循环引用既两个引用类型AB，A有一个地址指向了B,B也有一个对象指向了A,导致两者引用计数为2，正常情况下当test函数运行结束进行垃圾回收，但是AB两者的基数都不是0则回收失败，无法清除，这种情况大量发生时会造成大量的内存空间被浪费，故引用计数算法现在已经很少使用逐渐被标记清除算法替代</p>\n<pre><code class=\"css\">  function test() &#123;\n    let A = new Object()\n    let B = new Object()\n    B.a = A\n    A.b = B\n  &#125;\n</code></pre>\n<h1 id=\"V8对GC的优化\"><a href=\"#V8对GC的优化\" class=\"headerlink\" title=\"V8对GC的优化\"></a>V8对GC的优化</h1><h2 id=\"分代式优化\"><a href=\"#分代式优化\" class=\"headerlink\" title=\"分代式优化\"></a>分代式优化</h2><p>之前GC的清除算法无论是标记清除还是标记整理，在进行回收时都需要检查内存中的所有对象，但是如果存在一些，体积大，存活时间长，创建早的内存来进行检查，相当于是做了无用功，而新创建，体积小和存活时间短的对象需要更加频繁的检查所以基于这个问题V8提出了新生代和老生代的优化策略。将内存空间划分为新生代和老生代两个部分，不同部分执行不同的回收策略。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79967c264db445d2a0b7474d5785ee13~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<h3 id=\"新生代\"><a href=\"#新生代\" class=\"headerlink\" title=\"新生代\"></a>新生代</h3><p>顾名思义新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持 1～8M 的容量。 而新生代中的内存又会被拆分为两部分，使用区和空闲区，浏览器进行内存申请时分配使用区空间，当使用区空间快被写满时则进行一次垃圾回收，新生代的垃圾回收器会对使用区的活动对象进行标记，标记完成之后将使用区活跃的对象复制到空闲区，并进行排序，随后进入垃圾清理阶段，对使用区进行清理，清理操作完成之后，使用区和空闲区进行角色互换，之前的空闲区变成新的使用区，之前的使用区变成新的空闲区，循环往复。</p>\n<p>当一个对象被多次复制还未被清理掉，故此对象会被认定为生命周期较长的对象，会被从新生代移动到老生代中，采用老生代的垃圾回收机制管理。</p>\n<p>不过还需要注意一个特殊情况，如果新生代的复制一个对象到空闲区，如果空闲区的使用空间超过25%之后这个对象会被立即复制到老生代，而25%的红线要求是为了保证进行空闲区和使用区翻转时对于新的对象分配空间操作不会被影响。</p>\n<h3 id=\"老生代\"><a href=\"#老生代\" class=\"headerlink\" title=\"老生代\"></a>老生代</h3><p>相比于新生代，老生代顾名思义存放的就是一些生命周期比较长，经过多次新生代垃圾回收还存在的对象，同样的相比于新生代不仅垃圾回收频率较低，存储空间也是比新生代大的多。而老生代的回收算法就比较简单就是标记清除算法，不过在v8中为了处理标记清除算法产生的内存碎片问题，使用了标记整理算法进行空间优化大大提高了回收效率。</p>\n<h2 id=\"并行回收\"><a href=\"#并行回收\" class=\"headerlink\" title=\"并行回收\"></a>并行回收</h2><p>众所周知JavaScript是一门单线程语言，所以在进行GC回收时会阻塞js脚本的运行导致系统停顿，等GC回收结束后恢复运行，这被称为全停顿。</p>\n<p>但是这样的话会存在极大的风险，如果GC回收时间较长，就会导致系统停顿时间较长这是不可被接受的。所以V8引擎加入了并行回收的优化机制，在开启GC回收线程之后，会同时开启多个辅助线程进行处理，提高回处理时间，虽然增加了一部分线程之间协调的时间，但是总时间比一个线程用时来讲大大的缩短。避免系统卡顿时间过长。</p>\n<h2 id=\"增量标记\"><a href=\"#增量标记\" class=\"headerlink\" title=\"增量标记\"></a>增量标记</h2><p>由于全停顿标记策略在处理老生代垃圾回收时即使是有并行处理优化但是消耗时间也会消耗大量的时间，所以在2011年时V8团队又提出了增量标记策略来进行优化。<br> 增量标记思想就是将一次GC标记过程进行拆分，一次执行一小部分，执行完毕后继续执行脚本，执行一段脚本之后又继续执行刚刚拆分的GC标记任务，循环往复直至这次GC标记完成。</p>\n<h3 id=\"三色标记法-恢复与暂停\"><a href=\"#三色标记法-恢复与暂停\" class=\"headerlink\" title=\"三色标记法(恢复与暂停)\"></a>三色标记法(恢复与暂停)</h3><p>在引入三色标记法之前的GC标记只是将活动的变量标记为黑色，不活动的变量标记为白色，当GC标记过程结束之后，系统会回收掉所有的白色标记变量，但是这种非黑即白的方法虽然清除起来非常方便但是存在一个问题执行一段时间之后无法知道执行到了哪里，不能进行暂停。所以V8又引入了一个灰色进行暂停和恢复操作。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41fda88ed208434d800a1f258be59f4d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>如图所示，在GC标记开始时所有对象都是白色的，然后从根对象开始进行标记，先将这组对象标记为灰色然后进行记录，如果此时进行中断，后续恢复时既从灰色标记时开始即可，当回收器从标记工作表中弹出对象并访问他们的引用对象时，会将灰色置为黑色，同时将下一个引用对象置为灰色，继续往下进行标记工作。直至无可标记为灰色对象为止，此时表示GC标记过程结束，将所有未标记的变量进行回收工作。所以三色标记法可以渐进执行而不用每次执行都要全盘进行扫描整个内存空间，可以配合增量回收减少全停顿时间，提升体验</p>\n<h3 id=\"写屏障\"><a href=\"#写屏障\" class=\"headerlink\" title=\"写屏障\"></a>写屏障</h3><p>在一次完成GC标记暂停中，如果执行任务程序时内存中存在的变量引用关系被改变了，这样会导致此次GC存在问题。所以V8团队提出了写屏障作为保护。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36a75580ea724bdabffce8fbcedd0c17~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>如图所示，现有A、B、C三个对象依次被引用，且在GC过程中已经被标记了，但是在暂停GC任务，插入执行程序任务之后，引用关系被改变了，新增了一个新变量D，但是此时程序中也未存在灰色标记的变量，下一步进行清除机制时，新变量D按清除机制来讲是要被清除掉，但是这是极其不合理的，一个新的变量还存在引用就被回收掉，这会导致程序云行报错。此时写屏障机制就派上用场了，一旦有黑色的对象引用白色的对象，就会强制将被引用的白色变量标记为灰色，保证下一次的增量GC正确运行，这个机制称为强三色不变性(白色变量D被黑色变量B引用之后会被强制置灰保证程序运行正确性)。</p>\n<h3 id=\"惰性清理\"><a href=\"#惰性清理\" class=\"headerlink\" title=\"惰性清理\"></a>惰性清理</h3><p>在增量GC标记之后下一步就是来真正回收内存空间，通过惰性清理来进行清除释放内存。惰性清理机制运行原理是在进行回收时如果内存足够就可以将这个回收清理时间稍微延迟一下，让JavaScript脚本先执行，清理时也不会一下全部清理掉所有的垃圾，会根据按需进行清理直至所有垃圾都回收完毕，然后继续等待下个GC标记阶段执行结束。</p>\n<h3 id=\"并发回收\"><a href=\"#并发回收\" class=\"headerlink\" title=\"并发回收\"></a>并发回收</h3><p>虽然增量标记和惰性清理的出现使主线程停顿时间大大减少了，但是总体的停顿时间其实并未减少，如果真正细算起来甚至还增加了，应用程序的吞吐量也被降低，不过用户和浏览器的交互体验大大提升牺牲也是值得的。但是后续V8团队为了使回收更加高效， 又使用了并发回收机制，他是在主线程在执行程序任务时，主动开启辅助线程进行GC回收。而主线程又可以自由执行而不会挂起(标记操作全部由辅助进程操作)。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dab8f88e33e94c038f73b57e268c58b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"image.png\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>综合上文的知识点V8引擎的垃圾回收机制也逐渐揭开:分代式策略是V8里面垃圾回收机制的中流砥柱， 只不过老生代的垃圾回收略显麻烦为了优化性能和体验开发团队煞费苦心，在GC标记阶段通过并发回收策略开启辅助线程完成标记操作，清理操作时通过增量任务和惰性回收策略进行清理(同时也会开启辅助线程进行清理)大大提升了回收效率提高了人机交互的体验感。不得不说当下web式应用程序能够飞速发展少不了V8引擎的一份力</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cldqt8vn40000jps6cgvt9fle","category_id":"clds8g0hr0000xws62t297bma","_id":"clds8g0ht0001xws6gz3sdjci"}],"PostTag":[],"Tag":[]}}